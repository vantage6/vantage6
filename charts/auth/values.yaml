keycloak:
  postgresql:
    enabled: true
    auth:
      postgresPassword: postgres
      password: keycloak
      database: keycloak
  auth:
    adminUser: admin
    adminPassword: admin
  keycloakConfigCli:
    enabled: true
    # existingConfigMap: keycloak-realm-config
    configuration:
      realm:
        realm: vantage6
        enabled: true
        users:
          - username: admin
            enabled: true
            emailVerified: true
            # Note that email, firstName and lastName are set to fully initialize the
            # user in the database.
            email: admin@vantage6.org
            firstName: Admin
            lastName: Admin
            credentials:
              - type: password
                value: admin
            realmRoles:
              - admin
        clients:
           # TODO change to UI client
          - clientId: myclient
            publicClient: true
            redirectUris:
              - "*"
            webOrigins:
              - "*"
            protocolMappers:
              - name: client_type
                protocol: openid-connect
                protocolMapper: oidc-hardcoded-claim-mapper
                consentRequired: false
                config:
                  claim.name: client_type
                  claim.value: user
                  # TODO check if all are required
                  introspection.token.claim: true
                  userinfo.token.claim: true
                  id.token.claim: true
                  access.token.claim: true
          - clientId: backend
            publicClient: false
            redirectUris:
              - "*"
            # TODO set dynamic secret, now just for testing
            secret: mysecret
          - clientId: admin-client
            publicClient: false
            redirectUris:
              - "*"
            # TODO set dynamic secret, now just for testing
            secret: myadminsecret
            # TODO I think directAccessGrantsEnabled should be false - but then we need
            # another flow
            directAccessGrantsEnabled: true
            serviceAccountsEnabled: true
            standardFlowEnabled: true
          - clientId: vantage6-store-client
            publicClient: false
            redirectUris:
              - "*"
            # TODO set dynamic secret, now just for testing
            secret: mystoreregularclientsecret
          - clientId: vantage6-store-admin-client
            publicClient: false
            redirectUris:
              - "*"
            # TODO set dynamic secret, now just for testing
            secret: mystoreclientsecret
            # TODO I think directAccessGrantsEnabled should be false - but then we need
            # another flow
            directAccessGrantsEnabled: true
            serviceAccountsEnabled: true
            standardFlowEnabled: true
          - clientId: node-client
            publicClient: false
            redirectUris:
              - "*"
            # TODO set dynamic secret, now just for testing
            secret: mynodeclientsecret
            directAccessGrantsEnabled: true
            standardFlowEnabled: false
            protocolMappers:
              - name: client_type
                protocol: openid-connect
                protocolMapper: oidc-hardcoded-claim-mapper
                consentRequired: false
                config:
                  claim.name: client_type
                  claim.value: node
                  # TODO check if all are required
                  introspection.token.claim: true
                  userinfo.token.claim: true
                  id.token.claim: true
                  access.token.claim: true
        roles:
          # TODO I think this role is now assigned to each client? That should not be the case.
          realm:
            - name: admin
              clientRole: true
              composite: true
              composites:
                client:
                  # TODO check if all are required
                  realm-management:
                    - query-users
                    - query-groups
                    - impersonation
                    - view-users
                    - view-events
                    - manage-clients
                    - view-identity-providers
                    - query-clients
                    - view-realm
                    - manage-users
                    - query-realms
                    - manage-identity-providers
                    - view-authorization
                    - create-client
                    - view-clients
                    - manage-realm
                    - manage-events
                    - manage-authorization
