name: Build & Release

on:
  push:
    tags:
      - "version/*.*.*"

jobs:
  # Check that the tag that is being used starts with `version/`. If
  # this is not the case, this tag is not intended for release.
  verify:
    name: Verify version tag
    runs-on: ubuntu-latest
    steps:
      - id: verify
        if: startsWith(github.ref, 'refs/tags/version') != true
        uses: andymckay/cancel-action@0.2

  # From the tag we split the individual version components:
  # major.minor.patch.stage<N>. Note that post releases are not part
  # of this schema as they are only used for releasing updated docker
  # images. This job also commits the version number to the git repo
  version:
    name: Apply version
    runs-on: ubuntu-latest
    needs: verify
    steps:
      - name: split
        id: split
        run: |
          TAG=${GITHUB_REF#refs/*/}
          VERSION=${TAG#version/*}
          PARTS=(${VERSION//\./ })
          MAJOR=${PARTS[0]}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "major=${MAJOR}" >> $GITHUB_OUTPUT
          echo "minor=${PARTS[1]}" >> $GITHUB_OUTPUT
          PARTS2=( $(grep -Eo '[[:digit:]]+|[^[:digit:]]+' <<< ${PARTS[2]} ) )
          PATCH=${PARTS2[0]}
          echo "patch=${PATCH}" >> $GITHUB_OUTPUT
          STAGE=${PARTS2[1]}
          echo "stage=${STAGE}" >> $GITHUB_OUTPUT
          echo "build=${PARTS2[2]}" >> $GITHUB_OUTPUT
          MAJOR_NAME=''
          if [[ $MAJOR == '4' ]]; then MAJOR_NAME="cotopaxi"; fi
          if [[ $MAJOR == '3' ]]; then MAJOR_NAME="petronas"; fi
          if [[ $MAJOR == '2' ]]; then MAJOR_NAME="harukas"; fi
          if [[ $MAJOR == '1' ]]; then MAJOR_NAME="trolltunga"; fi
          echo "major_name=${MAJOR_NAME}" >> $GITHUB_OUTPUT

          # define boolean whether or not to give images the 'latest' tag. Only set to
          # true if the stage is empty, meaning it is a final release.
          TAG_LATEST=false
          if [[ "$STAGE" == "" ]]; then TAG_LATEST=true; fi
          echo "tag_latest=${TAG_LATEST}" >> $GITHUB_OUTPUT
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get branch on which the tag is based
        id: branchname
        run: |
          # get the branch on which the tag is based
          raw=$(git branch -r --points-at ${{ github.ref }})
          # delete the name of the branch up to and including 'origin/'
          branch=$(echo $raw | sed 's/.*origin\///')
          echo "branch=${branch}" >> $GITHUB_OUTPUT

      - name: Checkout branch on which tag was pushed
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.branch }}
          token: ${{ secrets.COMMIT_PAT }}

      - name: Update version in Python packages and Helm charts
        id: set_versions
        env:
          build: ${{ steps.split.outputs.build }}
          stage: ${{ steps.split.outputs.stage }}
          major: ${{ steps.split.outputs.major }}
          minor: ${{ steps.split.outputs.minor }}
          patch: ${{ steps.split.outputs.patch }}
        run: |
          BUILD="--build 0"; if [[ -n $build ]]; then BUILD="--build $build"; fi
          SPEC="--spec final"
          if [[ $stage == 'a' ]]; then SPEC="--spec alpha"; fi
          if [[ $stage == 'b' ]]; then SPEC="--spec beta"; fi
          if [[ $stage == 'rc' ]]; then SPEC="--spec candidate"; fi
          FLAGS="--version ${major}.${minor}.${patch} $BUILD --post 0 $SPEC"
          make set-version FLAGS="$FLAGS"

      - name: Update UI version in package.json
        env:
          version: ${{ steps.split.outputs.version }}
        run: |
          cd vantage6-ui/
          npm version --no-git-tag-version --allow-same-version $version

      - name: commit
        env:
          version: ${{ steps.split.outputs.version }}
          branch: ${{ steps.branchname.outputs.branch }}
        run: |
          git config --local user.name github-actions
          git config --local user.email github-actions@github.com
          git add *
          git commit -m "Updated the version to ${version}"
          git push origin HEAD:$branch

    outputs:
      version: ${{ steps.split.outputs.version }}
      major: ${{ steps.split.outputs.major }}
      minor: ${{ steps.split.outputs.minor }}
      patch: ${{ steps.split.outputs.patch }}
      stage: ${{ steps.split.outputs.stage }}
      build: ${{ steps.split.outputs.build }}
      major_name: ${{ steps.split.outputs.major_name }}
      branch: ${{ steps.branchname.outputs.branch }}
      tag_latest: ${{ steps.split.outputs.tag_latest }}

  # Create Github release which can be used DOI generation
  github-release:
    runs-on: ubuntu-latest
    needs: version
    env:
      version: ${{ needs.version.outputs.version }}
      stage: ${{ needs.version.outputs.stage }}
      branch: ${{ needs.version.outputs.branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{env.branch}}
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: ${{ env.stage != '' }}

  # Build and push Helm charts
  helm-charts:
    runs-on: ubuntu-latest
    needs: version
    env:
      branch: ${{ needs.version.outputs.branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.branch }}

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0

      - name: Login to harbor2.vantage6.ai
        env:
          USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PASSWORD: ${{ secrets.DOCKER_TOKEN }}
        run: helm registry login harbor2.vantage6.ai -u $USERNAME -p $PASSWORD

      - name: Install helm cm-push and add chartmuseum as a repository
        run: |
          helm plugin install https://github.com/chartmuseum/helm-push
          helm repo add v6-harbor-infrastructure https://harbor2.vantage6.ai/chartrepo/infrastructure --username $USERNAME --password $PASSWORD

      - name: Update Helm dependencies
        run: |
          helm dependency update charts/common
          helm dependency update charts/node
          helm dependency update charts/store
          helm dependency update charts/server

      - name: Package Helm charts
        run: |
          helm package charts/common
          helm package charts/node
          helm package charts/store
          helm package charts/server

      - name: Push Helm charts
        run: |
          helm cm-push common-*.tgz v6-harbor-infrastructure
          helm cm-push node-*.tgz v6-harbor-infrastructure
          helm cm-push store-*.tgz v6-harbor-infrastructure
          helm cm-push server-*.tgz v6-harbor-infrastructure

  support-images:
    name: Build support images
    runs-on: ubuntu-latest
    needs: version
    env:
      version: ${{ needs.version.outputs.version }}
      branch: ${{ needs.version.outputs.branch }}
      patch: ${{ needs.version.outputs.patch }}
      stage: ${{ needs.version.outputs.stage }}
      tag_latest: ${{ needs.version.outputs.tag_latest }}
    steps:
      - name: Login to harbor2.vantage6.ai
        env:
          USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PASSWORD: ${{ secrets.DOCKER_TOKEN }}
        run: docker login harbor2.vantage6.ai -u $USERNAME -p $PASSWORD

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.branch }}

      - # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # We need this for building multi-arch images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push support images
        run: make support-image TAG=$version PUSH_REG=true TAG_LATEST=$tag_latest

  infrastructure-images:
    name: Build infrastructure images
    runs-on: ubuntu-latest
    needs: version
    env:
      version: ${{ needs.version.outputs.version }}
      major: ${{ needs.version.outputs.major }}
      minor: ${{ needs.version.outputs.minor }}
      patch: ${{ needs.version.outputs.patch }}
      stage: ${{ needs.version.outputs.stage }}
      branch: ${{ needs.version.outputs.branch }}
      tag_latest: ${{ needs.version.outputs.tag_latest }}
    steps:
      - name: Login to harbor2.vantage6.ai
        env:
          USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PASSWORD: ${{ secrets.DOCKER_TOKEN }}
        run: docker login harbor2.vantage6.ai -u $USERNAME -p $PASSWORD

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.branch }}

      - # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - # We need this for building multi-arch images
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - # we only release a new base image if it is a major or minor release
        name: Build and push Docker base image
        if: ${{ env.patch == 0 }}
        run: make base-image TAG=${major}.${minor} PUSH_REG=true TAG_LATEST=$tag_latest

      - # build the actual infrastructure images
        name: Build and push Docker image
        run: make image TAG=$version BASE=${major}.${minor} PUSH_REG=true TAG_LATEST=$tag_latest

      - # build the algorithm store image
        name: Build and push Docker algorithm store image
        run: make algorithm-store-image TAG=$version BASE=${major}.${minor} PUSH_REG=true TAG_LATEST=$tag_latest

      - # build the UI image
        name: Build and push UI image
        run: make ui-image TAG=$version BASE=${major}.${minor} PUSH_REG=true TAG_LATEST=$tag_latest

  algorithm-base-image:
    name: Build algorithm base image
    runs-on: ubuntu-latest
    needs: version
    env:
      major: ${{ needs.version.outputs.major }}
      minor: ${{ needs.version.outputs.minor }}
      branch: ${{ needs.version.outputs.branch }}
      patch: ${{ needs.version.outputs.patch }}
      stage: ${{ needs.version.outputs.stage }}
      tag_latest: ${{ needs.version.outputs.tag_latest }}

    steps:
      - name: Login to harbor2.vantage6.ai
        env:
          USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PASSWORD: ${{ secrets.DOCKER_TOKEN }}
        run: docker login harbor2.vantage6.ai -u $USERNAME -p $PASSWORD

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.branch }}

      - # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # We need this for building multi-arch images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Algorithm base image
        if: ${{ env.stage == '' || env.patch == 0 }}
        run: make algorithm-base-image TAG=${major}.${minor} PUSH_REG=true TAG_LATEST=$tag_latest

      - name: Build and push Algorithm OMOP base image
        if: ${{ env.stage == '' || env.patch == 0 }}
        run: make algorithm-omop-base-image BASE=${major}.${minor} TAG=${major}.${minor} PUSH_REG=true TAG_LATEST=$tag_latest

  # Update the server and node images on harbor2 for this major version,
  # including the 'live' tag that triggers a redeployment of the IKNL deployment
  deploy:
    runs-on: ubuntu-latest
    needs: [version, infrastructure-images, support-images]
    env:
      version: ${{ needs.version.outputs.version }}
      major: ${{ needs.version.outputs.major }}
      minor: ${{ needs.version.outputs.minor }}
      patch: ${{ needs.version.outputs.patch }}
      stage: ${{ needs.version.outputs.stage }}
      major_name: ${{ needs.version.outputs.major_name }}
    steps:
      - name: Login to harbor2.vantage6.ai
        env:
          USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PASSWORD: ${{ secrets.DOCKER_TOKEN }}
        run: |
          docker login harbor2.vantage6.ai -u $USERNAME -p $PASSWORD

      - name: Pull docker images
        run: |
          docker pull harbor2.vantage6.ai/infrastructure/server:${version}
          docker pull harbor2.vantage6.ai/infrastructure/node:${version}
          docker pull harbor2.vantage6.ai/infrastructure/algorithm-store:${version}
          docker pull harbor2.vantage6.ai/infrastructure/ui:${version}
          docker pull harbor2.vantage6.ai/infrastructure/alpine:${version}
          docker pull harbor2.vantage6.ai/infrastructure/vpn-client:${version}
          docker pull harbor2.vantage6.ai/infrastructure/vpn-configurator:${version}
          docker pull harbor2.vantage6.ai/infrastructure/ssh-tunnel:${version}
          docker pull harbor2.vantage6.ai/infrastructure/squid:${version}

      - name: Tag docker images
        if: ${{  env.stage == ''  &&  env.major_name != '' }}
        run: |
          docker tag harbor2.vantage6.ai/infrastructure/server:${version} harbor2.vantage6.ai/infrastructure/server:${major_name}
          docker tag harbor2.vantage6.ai/infrastructure/server:${version} harbor2.vantage6.ai/infrastructure/server:${major_name}-live
          docker tag harbor2.vantage6.ai/infrastructure/node:${version} harbor2.vantage6.ai/infrastructure/node:${major_name}
          docker tag harbor2.vantage6.ai/infrastructure/algorithm-store:${version} harbor2.vantage6.ai/infrastructure/algorithm-store:${major_name}
          docker tag harbor2.vantage6.ai/infrastructure/ui:${version} harbor2.vantage6.ai/infrastructure/ui:${major_name}

      - # Release a node image for major.minor. This is released for any
        # non-candidate release or if no non-candidate release has been made yet
        # for the current minor version
        name: Build latest node minor image
        if: ${{ env.stage == '' || env.patch == 0 }}
        run: |
          docker tag harbor2.vantage6.ai/infrastructure/node:${version} harbor2.vantage6.ai/infrastructure/node:${major}.${minor}
          docker push harbor2.vantage6.ai/infrastructure/node:${major}.${minor}

      - name: Push docker images
        if: ${{  env.stage == ''  &&  env.major_name != '' }}
        run: |
          docker push harbor2.vantage6.ai/infrastructure/server:${major_name}
          docker push harbor2.vantage6.ai/infrastructure/server:${major_name}-live
          docker push harbor2.vantage6.ai/infrastructure/node:${major_name}
          docker push harbor2.vantage6.ai/infrastructure/algorithm-store:${major_name}
          docker push harbor2.vantage6.ai/infrastructure/ui:${major_name}

      - # Release matching support images for major.minor. This is released for any
        # non-candidate release or if no non-candidate release has been made yet
        # for the current minor version
        name: Build latest minor version support images
        if: ${{ env.stage == '' || env.patch == 0 }}
        run: |
          docker tag harbor2.vantage6.ai/infrastructure/alpine:${version} harbor2.vantage6.ai/infrastructure/alpine:${major}.${minor}
          docker push harbor2.vantage6.ai/infrastructure/alpine:${major}.${minor}

          docker tag harbor2.vantage6.ai/infrastructure/vpn-client:${version} harbor2.vantage6.ai/infrastructure/vpn-client:${major}.${minor}
          docker push harbor2.vantage6.ai/infrastructure/vpn-client:${major}.${minor}

          docker tag harbor2.vantage6.ai/infrastructure/vpn-configurator:${version} harbor2.vantage6.ai/infrastructure/vpn-configurator:${major}.${minor}
          docker push harbor2.vantage6.ai/infrastructure/vpn-configurator:${major}.${minor}

          docker tag harbor2.vantage6.ai/infrastructure/ssh-tunnel:${version} harbor2.vantage6.ai/infrastructure/ssh-tunnel:${major}.${minor}
          docker push harbor2.vantage6.ai/infrastructure/ssh-tunnel:${major}.${minor}

          docker tag harbor2.vantage6.ai/infrastructure/squid:${version} harbor2.vantage6.ai/infrastructure/squid:${major}.${minor}
          docker push harbor2.vantage6.ai/infrastructure/squid:${major}.${minor}


  # Build an release all the vantage6 infrastructure packages. For all
  # the packages it will (1) update the version as specified in the tag,
  # (2) build the package, (3) upload it to pypi, and (4) build and push
  # the Docker image
  build-n-release:
    name: Build and release the project
    runs-on: ubuntu-latest
    # Note: infrastructure-images is not a required dependency, but we want
    # to ensure that step succeeds before pushing the code to PyPi
    needs: [version, infrastructure-images]
    env:
      version: ${{ needs.version.outputs.version }}
      major: ${{ needs.version.outputs.major }}
      minor: ${{ needs.version.outputs.minor }}
      patch: ${{ needs.version.outputs.patch }}
      stage: ${{ needs.version.outputs.stage }}
      build: ${{ needs.version.outputs.build }}
      branch: ${{ needs.version.outputs.branch }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.branch }}

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install click
          pip install wheel
          pip install twine

      - name: Build project
        id: make
        run: |
          make rebuild

      - name: Publish project to PyPi
        id: publish
        if: ${{ !env.ACT }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          make publish

  # When the project is built and released the Discord community is notified.
  notify:
    runs-on: ubuntu-latest
    needs: [version, build-n-release, deploy]
    env:
      version: ${{ needs.version.outputs.version }}
      stage: ${{ needs.version.outputs.stage }}
      branch: ${{ needs.version.outputs.branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.branch }}

      - name: Install dependencies
        run: |
          pip install discord.py==1.7.3
          pip install click

      - name: Notify Discord community
        if: ${{  env.stage == '' }}
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_RELEASE_TOKEN }}
        run: |
          make community FLAGS="--version $version --notes '' \
            --post-notes ''"
