version: v2beta1
name: vantage6git

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev vantage6-server    # 4. Start dev mode "app" (see "dev" section)

  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  # deploy:
  #   run: |-
  #     run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
  #     ensure_pull_secrets --all                         # 2. Ensure pull secrets
  #     build_images --all -t $(git describe --always)    # 3. Build, tag (git commit hash) and push all images (see "images")
  #     create_deployments --all                          # 4. Deploy Helm charts and manifests specfied as "deployments"

# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  vantage6-server:
    image: harbor2.vantage6.ai/infrastructure/server:5.0.0a0
    dockerfile: docker/node-and-server.Dockerfile
    context: .

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  vantage6-server:
    # This deployment uses `kubectl` but you can also define `helm` deployments
    kubectl:
      manifests:
        - kube/server/**

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  vantage6-server:

    # Search for the container that runs this image
    imageSelector: harbor2.vantage6.ai/infrastructure/server:5.0.0a0
    namespace: vantage6-server
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    # devImage: harbor2.vantage6.ai/infrastructure/server:5.0.0a0
    # Sync files between the local filesystem and the development container
    sync:
    - path: ./vantage6-server/vantage6/server/resource/version.py:/vantage6/vantage6-server/vantage6/server/resource/version.py
      # disableDownload: true
      file: true
    #   polling: true

      # disableDownload: true
      # printLogs: true
        # excludeFile: ./vantage6-server/vantage6/server/wsgi.py
        # polling: true
        # onUpload:
        #   restartContainer: true
    # Open a terminal and use the following command to start it
    # TODO we should create start scripts for this
        #   --py-autoreload 1 \
    terminal:
        command: |-
            uwsgi \
            --py-autoreload 1 \
            --http :7601 \
            --gevent 1000 \
            --http-websockets --master \
            --callable app --disable-logging \
            --wsgi-file /vantage6/vantage6-server/vantage6/server/wsgi.py \
            --pyargv /mnt/config.yaml

    # command: [
    #     "uwsgi", "--py-autoreload", "1", "--http", ":7601", "--gevent", "1000", "--http-websockets",
    #     "--master", "--callable", "app", "--disable-logging", "--wsgi-file",
    #     "/vantage6/vantage6-server/vantage6/server/wsgi.py", "--pyargv",
    #     "/mnt/config.yaml",
    #   ]

    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
    # ssh:
    #   enabled: true

    # Make the following commands from my local machine available inside the dev container
    proxyCommands:
      - command: devspace
      - command: kubectl
    #   - command: helm
    #   - gitCredentials: true
    # Forward the following ports to be able access your application via localhost
    # ports:
    #   - port: 7601:81
    # # Open the following URLs once they return an HTTP status code other than 502 or 503
    # open:
    #   - url: http://localhost:8080

    logs:
      enabled: true

# Use the `commands` section to define repeatable dev workflows for this project
# commands:
#   migrate-db:
#     command: |-
#       echo 'This is a cross-platform, shared command that can be used to codify any kind of dev task.'
#       echo 'Anyone using this project can invoke it via "devspace run migrate-db"'

# Define dependencies to other projects with a devspace.yaml
# dependencies:
#   api:
#     git: https://...  # Git-based dependencies
#     tag: v1.0.0
#   ui:
#     path: ./ui        # Path-based dependencies (for monorepos)
