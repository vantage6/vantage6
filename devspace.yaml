version: v2beta1
name: vantage6git

vars:
  SERVER_IMAGE: harbor2.vantage6.ai/infrastructure/server
  SERVER_IMAGE_TAG: 5.0.0a0
  NODE_IMAGE:
    default: harbor2.vantage6.ai/infrastructure/node:5.0.0a0
  NODE_CONFIG_FILE: null



# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all
      run_pipelines server node --sequential

  init:
    run: |-
      run_dependencies --all
      ensure_pull_secrets --all
      create_deployments vantage6-server
      create_deployments vantage6-store # vantage6-ui
      start_dev init vantage6-store
      # TODO replace this with a retry mechanism
      echo "Waiting for server to start... (30 seconds)"
      sleep 30
      python dev/delete-basic-fixtures.py
      python dev/load-basic-fixtures.py
      python dev/connect-store.py
      stop_dev --all

  server:
    run: |-
      run_dependencies --all      # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all   # 2. Ensure pull secrets
      create_deployments vantage6-server # vantage6-ui # vantage6-store     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev vantage6-server vantage6-ui vantage6-store

  node:
    run: |-
      create_deployments vantage6-node
      start_dev vantage6-node

# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  vantage6-server:
    image: ${SERVER_IMAGE}
    dockerfile: docker/node-and-server.Dockerfile
    context: .

  node:
    image: harbor2.vantage6.ai/infrastructure/node:v5
    dockerfile: docker/node-and-server.Dockerfile
    context: .

# This is a list of `deployments` that DevSpace can create for this project
deployments:

  vantage6-server:
    helm:
      chart:
        name: ./charts/server
      values:
        server:
          image:
            repository: ${SERVER_IMAGE}
            tag: ${SERVER_IMAGE_TAG}
          logging:
            level: DEBUG

        database:
          volumePath: /mnt/data

  vantage6-store:
    helm:
      chart:
        name: ./charts/store
      values:

        store:

          image:
            repository: harbor2.vantage6.ai/infrastructure/algorithm-store
            tag: 5.0.0a0
          logging:
            level: DEBUG
          vantage6Server:
            uri: http://host.docker.internal:7601/api
          policies:
            allowLocalhost: 'True'

        database:
          volumePath: /mnt/data

  # vantage6-ui:
  #   kubectl:
  #     manifests:
  #       - kube/server-namespace.yml
  #       - kube/ui/.

  vantage6-node:
    kubectl:
      manifests:
        - kube/node/namespace.yml
        - kube/node/.


# This is a list of `dev` containers that are based on the containers created by your deployments
dev:

  # we use this to populate the database with some basic data. We need a port to talk
  # to as the ingress is not deployed yet.
  init:
    imageSelector: ${SERVER_IMAGE}
    namespace: vantage6-server
    ports:
      - port: 7601:7601

  vantage6-server:

    # Search for the container that runs this image
    imageSelector: ${SERVER_IMAGE}:${SERVER_IMAGE_TAG}
    namespace: vantage6-server

    sync:
    - path: ./vantage6/:/vantage6/vantage6/
      disableDownload: true
    - path: ./vantage6-common/:/vantage6/vantage6-common/
      disableDownload: true
    - path: ./vantage6-server/:/vantage6/vantage6-server/
      disableDownload: true
      startContainer: true
    # - path: ./dev/:/dev/
    #   # Make sure the container starts after syncing, this allows for modification of
    #   # the start scripts
    #   startContainer: true

    command: ["/bin/sh", "/vantage6/vantage6-server/dev_server.sh"]

    # Make the following commands from my local machine available inside the dev container
    proxyCommands:
      - command: devspace
      - command: kubectl

    #   - command: helm
    #   - gitCredentials: true
    # Forward the following ports to be able access your application via localhost
    ports:
      - port: 7601:7601

    # # Open the following URLs once they return an HTTP status code other than 502 or 503

    logs:
      enabled: true

  vantage6-store:

    imageSelector: harbor2.vantage6.ai/infrastructure/algorithm-store:5.0.0a0
    ports:
      - port: 7602:7602

  vantage6-ui:

    imageSelector: harbor2.vantage6.ai/infrastructure/ui:5.0.0a0

    ports:
      - port: 7600:80

  vantage6-node:

    imageSelector: ${NODE_IMAGE}
    namespace: vantage6-node

    sync:
    - path: ./vantage6/:/vantage6/vantage6/
      disableDownload: true
      onUpload:
        restartContainer: true
    - path: ./vantage6-common/:/vantage6/vantage6-common/
      disableDownload: true
      onUpload:
        restartContainer: true
    - path: ./vantage6-node/:/vantage6/vantage6-node/
      disableDownload: true
      onUpload:
        restartContainer: true
    - path: ./dev/.data/:/mnt/config/
      disableDownload: true
      startContainer: true
      onUpload:
        restartContainer: true
    # - path: /Users/frankmartin/.kube/config:/app/.kube/config
    #   disableDownload: true
    #   startContainer: true
    #   onUpload:
    #     restartContainer: true


    restartHelper:
      inject: true

    command: ["python", "/vantage6/vantage6-node/vantage6/dev_start.py", "/mnt/config/"]



# Use the `commands` section to define repeatable dev workflows for this project
commands:
  populate-server:
    command: devspace run-pipeline init
  start-dev:
    command: devspace dev
  stop-dev:
    command: devspace reset pods
  purge:
    command: devspace purge

  # load-basic-fixtures:
  #   command: "python dev/load-basic-fixtures.py"
  # delete-basic-fixtures:
  #   command: "python dev/delete-basic-fixtures.py"
  # start-nodes:
  #   command: devspace run-pipeline node
  # start-nodes-2:
  #   command: v6 node start -c dev/.data/node_org_1.yaml --image ${NODE_IMAGE}
  # stop-nodes:
  #   command: v6 node stop --all

# Define dependencies to other projects with a devspace.yaml
# dependencies:
#   api:
#     git: https://...  # Git-based dependencies
#     tag: v1.0.0
#   ui:
#     path: ./ui        # Path-based dependencies (for monorepos)
