version: v2beta1
name: vantage6git

# TODO using tags isnt safe with the devspace build stuff
vars:
  SERVER_IMAGE: harbor2.vantage6.ai/infrastructure/server
  NODE_IMAGE: harbor2.vantage6.ai/infrastructure/node
  STORE_IMAGE: harbor2.vantage6.ai/infrastructure/algorithm-store
  UI_IMAGE: harbor2.vantage6.ai/infrastructure/ui
  NODE_TEST_DATABASE_MOUNT_PATH:
    question: "Where is the parent folder where the node test data is located on the host machine?"
    default: ${PWD}/dev
  NODE_TEST_DATABASE_NAME:
    question: "What is the name of your node test data file?"
    default: olympic_athletes_2016.csv
  TASK_DIRECTORY:
    question: "Where is your task directory located on the host machine?"
    default: ${PWD}/dev/.tasks
  HOST_URI:
    question: "What is the ip address of your host machine?"
    default: host.docker.internal
  #set to 0.0.0.0 to make the dev environment (ui, api) accessible from outside
  PORTS_BIND_ADDRESS:
    question: "What is the bind ip address of your ports? [Bind to 'localhost' if using docker, otherwise the suggested address]"
    default: ${HOST_URI}
  NUMBER_OF_NODES:
    question: "How many nodes do you want to create for your development environment?"
    default: 3
  TASK_NAMESPACE: vantage6-tasks
  SERVER_DATABASE_MOUNT_PATH:
    question: "Where is your server database located on the host machine?"
    default: ${PWD}/dev/.db/db_pv_server
  STORE_DATABASE_MOUNT_PATH:
    question: "Where is your store database located on the host machine?"
    default: ${PWD}/dev/.db/db_pv_store
  K8S_NODE_NAME:
    question: "What is the name of the k8s node where the databases are running?"
    default: docker-desktop

pipelines:

  # Main entrypoint for development (`devspace dev`). This starts all server components
  # and the nodes. Make sure that you have run `devspace run-pipeline init` before.
  dev:
    run: |-
      run_dependencies --all
      run_pipelines \
        server \
        node \
        --sequential

  # Initialize a development vantage6 network. This will create the necessary
  # entities at the server (e.g. organizations, nodes, etc.), generate the node
  # configuration files (stores these in the `dev/.data` directory) and finally
  # connects the local store to the server.
  # TODO register the diagnostics image in the algorithm store
  init:
    run: |-
      run_dependencies --all
      ensure_pull_secrets --all
      create_deployments \
        vantage6-server
      create_deployments \
        vantage6-store
      start_dev \
        vantage6-server-init \
        vantage6-store-init
      # TODO replace this with a retry mechanism
      echo "Waiting for server to start..."
      python dev/delete-basic-fixtures.py
      python dev/load-basic-fixtures.py \
        --number-of-nodes $NUMBER_OF_NODES \
        --task-directory $TASK_DIRECTORY \
        --task-namespace $TASK_NAMESPACE
      python dev/connect-store.py
      stop_dev --all

  server:
    run: |-
      run_dependencies --all
      ensure_pull_secrets --all
      create_deployments \
        vantage6-server \
        vantage6-store
      start_dev \
        vantage6-server \
        vantage6-server-db \
        vantage6-ui \
        vantage6-store \
        vantage6-store-db

  node:
    run: |-
      create_deployments \
        vantage6-node
      start_dev \
        vantage6-node

hooks:
# Execute the hook in a golang shell (cross operating system compatible)
- name: "create-tasks-folder"
  command: |
    echo "Creating tasks folder"
    python dev/create_mount_directory.py ${TASK_DIRECTORY}
  events: ["before:deploy:vantage6-node"]
- name: "create-server-database-folder"
  command: |
    echo "Creating server database folder"
    python dev/create_mount_directory.py ${SERVER_DATABASE_MOUNT_PATH}
  events: ["before:deploy:vantage6-server"]
- name: "create-store-database-folder"
  command: |
    echo "Creating algorithm store database folder"
    python dev/create_mount_directory.py ${STORE_DATABASE_MOUNT_PATH}
  events: ["before:deploy:vantage6-store"]

# This is a list of `images` that DevSpace can build for this project. These can be
# build with `devspace build` or when running `devspace dev -b`.
images:
  server:
    image: ${SERVER_IMAGE}
    dockerfile: docker/node-and-server.Dockerfile
    context: .

  node:
    image: ${NODE_IMAGE}
    dockerfile: docker/node-and-server.Dockerfile
    context: .

  store:
    image: ${STORE_IMAGE}
    dockerfile: docker/algorithm-store.Dockerfile
    context: .

  ui:
    image: "${UI_IMAGE}"
    dockerfile: docker/ui_dev.Dockerfile
    context: .

# This is a list of `deployments` that DevSpace can create for this project
# By default, image tags are automatically updated/replaced in the deployments with the
# image tags that are built by DevSpace (see `.devspace/cache.yaml`). To disable this,
# set `updateImageTags: false` in the deployment.
deployments:

  # The server deployment contains the server, database, rabbit mq and the UI. The
  # store is deployed separately as it can have an many-to-many relationship with the
  # server (This is also why they are in separate Helm charts).
  vantage6-server:
    helm:
      chart:
        name: ./charts/server
      values:
        server:
          image: ${SERVER_IMAGE} # needed for automatic image tag update
          logging:
            level: DEBUG
          jwt:
            secret: development-constant-secret!
          dev:
            host_uri: ${HOST_URI}
        ui:
          image: ${UI_IMAGE}

        database:
          volumePath: ${SERVER_DATABASE_MOUNT_PATH}
          k8sNodeName: ${K8S_NODE_NAME}

  # The store deployment contains the store and the database.
  vantage6-store:
    helm:
      chart:
        name: ./charts/store
      values:
        store:
          image: ${STORE_IMAGE}
          logging:
            level: DEBUG
          vantage6Server:
            uri: http://localhost:7601/server
          policies:
            allowLocalhost: true
            disable_review: true
            review_own_algorithm: true
            assignReviewOwnAlgorithm: true
          dev:
            host_uri: ${HOST_URI}

        # This is the location of the database on the host system. In case you are using
        # Windows in combination with WSL, you should put a path here that is accessible
        # by the Docker daemon. For example you can use the following path:
        #
        #   volumePath: /run/desktop/mnt/host/wsl/[SOME_PATH]
        #
        # This creates a mount to the `/mnt/wsl/[SOME_PATH]` directory. Note that this
        # directory is emptied when the WSL2 instance is restarted.
        database:
          volumePath: ${STORE_DATABASE_MOUNT_PATH}
          k8sNodeName: ${K8S_NODE_NAME}

  # The node deployment should not be 'deployed' only, it should only be deployed in
  # combination with the `dev` container (The node container that is started by the
  # `dev` section of this file). This is because the node deployment requires the
  # configuration files that are generated by the `dev` container. These are then
  # mounted into the node container. The node starts then in development mode using
  # the `dev_start.py` script. This allows us to run multiple nodes in a single
  # container. The good part about this is that all nodes receive hot-reloaded code :)
  vantage6-node:
    helm:
      chart:
        name: ./charts/node
      # See the env section in the dev section where the database environment variables
      # are set.
      values:
        node:
          image: ${NODE_IMAGE}
          databases:
            fileBased:
            - name: default
              uri: ${NODE_TEST_DATABASE_MOUNT_PATH}/${NODE_TEST_DATABASE_NAME}
              type: csv
              volumePath: ${NODE_TEST_DATABASE_MOUNT_PATH}
              originalName: ${NODE_TEST_DATABASE_NAME}
            serviceBased: []
          k8sNodeName: ${K8S_NODE_NAME}
          taskDirHost: ${TASK_DIRECTORY}
          logging:
            level: DEBUG

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:

  # we use this to populate the database with some basic data. We need a port to talk
  # to as the ingress is not deployed yet.
  vantage6-server-init:
    imageSelector: ${SERVER_IMAGE}
    ports:
      - port: 7601:7601
        bindAddress: localhost
      - port: 7601:7601
        bindAddress: ${PORTS_BIND_ADDRESS}

  # We use this to enable the server and the store to be coupled. We need a port to talk
  # to as the ingress is not deployed yet.
  vantage6-store-init:
    imageSelector: ${STORE_IMAGE}
    ports:
      - port: 7602:7602
        bindAddress: localhost
      - port: 7602:7602
        bindAddress: ${PORTS_BIND_ADDRESS}

  # This puts the server container in development mode. It syncs the local files with
  # the container and starts the server in development mode. Code changes will be
  # hot-reloaded and a port forward is created to access the server.
  vantage6-server:
    labelSelector:
      component: vantage6-server
    sync:
    - path: ./vantage6/:/vantage6/vantage6/
      disableDownload: true
    - path: ./vantage6-common/:/vantage6/vantage6-common/
      disableDownload: true
    - path: ./vantage6-backend-common/:/vantage6/vantage6-backend-common/
      disableDownload: true
    - path: ./vantage6-server/:/vantage6/vantage6-server/
      disableDownload: true
      startContainer: true
    command: ["/bin/sh", "/vantage6/vantage6-server/dev_server.sh"]
    ports:
    - port: 7601:7601
      bindAddress: localhost
    - port: 7601:7601
      bindAddress: ${PORTS_BIND_ADDRESS}
    logs:
      enabled: true

  vantage6-server-db:
    labelSelector:
      app: vantage6-server
      component: postgres
    ports:
      # expose the server database port
      - port: 7632:5432
        bindAddress: localhost
      - port: 7632:5432
        bindAddress: ${PORTS_BIND_ADDRESS}

  vantage6-store:
    imageSelector: ${STORE_IMAGE}
    ports:
      - port: 7602:7602
        bindAddress: localhost
      - port: 7602:7602
        bindAddress: ${PORTS_BIND_ADDRESS}

    sync:
    - path: ./vantage6/:/vantage6/vantage6/
      disableDownload: true
    - path: ./vantage6-common/:/vantage6/vantage6-common/
      disableDownload: true
    - path: ./vantage6-backend-common/:/vantage6/vantage6-backend-common/
      disableDownload: true
    - path: ./vantage6-algorithm-store/:/vantage6/vantage6-algorithm-store/
      disableDownload: true
      startContainer: true
    command: ["/bin/sh", "/vantage6/vantage6-algorithm-store/dev_store.sh"]

  vantage6-store-db:
    labelSelector:
      app: store
      component: postgres
    ports:
      # expose the store database port
      - port: 7633:5432
        bindAddress: localhost
      - port: 7633:5432
        bindAddress: ${PORTS_BIND_ADDRESS}

  # This puts the store container in development mode.
  vantage6-ui:
    imageSelector: ${UI_IMAGE}
    sync:
    # TODO ideally we'd include the entire dir vantage6-ui/ but that leads to issues
    # with the node_modules dir, as well as with the JSON files. Usually changing these
    # would require image rebuild but it's not transparent.
    - path: ./vantage6-ui/src/:/app/src/
      disableDownload: true

  # Where as we could hot-reload the server code using wsgi, we cannot do this with the
  # node code. We leverage the `restartHelper` and `onUpload.restartContainer` to
  # restart the node container (with multiple nodes) when the code changes.
  vantage6-node:
    labelSelector:
      component: node
    env:
      - name: "DATABASE_LABELS"
        value: "default"
      - name: "DATABASE_DEFAULT_URI"
        value: ${NODE_TEST_DATABASE_MOUNT_PATH}/${NODE_TEST_DATABASE_NAME}
      - name: "DATABASE_DEFAULT_TYPE"
        value: "csv"
    sync:
    - path: ./vantage6/:/vantage6/vantage6/
      disableDownload: true
      onUpload:
        restartContainer: true
    - path: ./vantage6-common/:/vantage6/vantage6-common/
      disableDownload: true
      onUpload:
        restartContainer: true
    - path: ./vantage6-node/:/vantage6/vantage6-node/
      disableDownload: true
      onUpload:
        restartContainer: true
    # It is possible to manually add nodes. You need to put the configuration files in
    # the `dev/.data` directory. The `dev_start.py` script will then start the nodes.
    - path: ./dev/.data/:/mnt/config/
      disableDownload: true
      startContainer: true
      onUpload:
        restartContainer: true
    logs:
      enabled: true

    restartHelper:
      inject: true

    command: ["bash", "/vantage6/vantage6-node/dev_start.sh", "/mnt/config/"]



# Use the `commands` section to define repeatable dev workflows for this project
commands:
  # This command will spin up a server and store temporary to fill it with some
  # basic data.
  populate-server:
    description: "Populate the server with fixtures for a given number of nodes"
    command: devspace run-pipeline init

  # This will put all components in development mode. This is the main entrypoint
  # for development.
  start-dev:
    description: "Start the development environment"
    command: devspace dev

  # This will stop all components from the development mode. Note that the deployments
  # are not deleted.
  stop-dev:
    description: "Stop the development environment"
    command: devspace reset pods

  # This will delete all deployments and services. This is useful when you want to
  # start from scratch.
  purge:
    description: "Purge the development environment"
    command: devspace purge

  # This will build all images for this project. This is probably the first command
  # you want to run. In case you do not run it, it will pull the latest images from
  # our harbor registry (which potentially has outdated dependencies).
  rebuild:
    description: "Rebuild all images for this project"
    command: devspace build
