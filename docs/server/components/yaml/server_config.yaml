# Human readable description of the server instance. This is to help
# your peers to identify the server
description: Test

# Port to which the server binds
port: 7601

# API path prefix. Server may be reached at https://domain.org/<api_path>/<endpoint>.
# In case you use a reverse proxy and use a subpath, make sure to set this option.
api_path: /api

# Let the server know where it is hosted. This is used as a setting to
# communicate back and forth with other vantage6 components such as the
# algorithm store.
# Example for the cotopaxi server
server_url: https://cotopaxi.vantage6.ai
# Example for running the server locally with default settings:
# server_url: http://localhost:7601

# The secret key used to generate JWT authorization tokens. This should
# be kept secret as others are able to generate access tokens if they
# know this secret. This parameter is optional. In case it is not
# provided in the configuration it is generated each time the server
# starts, thereby invalidating all previous distributed keys. Recommended only in
# non-production environments
jwt_secret_key: super-secret-key!

# Settings for the logger
logging:
  # Controls the logging output level. Could be one of the following
  # levels: CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET
  level: DEBUG

  # Filename of the log-file, used by RotatingFileHandler
  file: test.log

  # Whether the output is shown in the console or not
  use_console: true

  # The number of log files that are kept, used by RotatingFileHandler
  backup_count: 5

  # Size in kB of a single log file, used by RotatingFileHandler
  max_size: 1024

  # format: input for logging.Formatter,
  format: "%(asctime)s - %(name)-14s - %(levelname)-8s - %(message)s"
  datefmt: "%Y-%m-%d %H:%M:%S"

  # (optional) set the individual log levels per logger name, for example
  # mute some loggers that are too verbose.
  loggers:
    - name: urllib3
      level: warning
    - name: socketIO-client
      level: warning
    - name: engineio.server
      level: warning
    - name: socketio.server
      level: warning
    - name: sqlalchemy.engine
      level: warning

# Additional debug flags
debug:
  # Set to `true` to enable debug mode for the socketio server
  socketio: false

  # Set to `true` to enable debug mode in the Flask app
  flask: false

# a worker will run every hour and delete results from completed runs that are
# older than the number of days specified here. Disabled by default.
# Careful! Make sure you have regular backups of your database before enabling
# this feature, as a wrong configuration could lead to data loss.
runs_data_cleanup_days: 30
# the cleanup worker will also delete the algorithm arguments of the runs if this is set
# to true. False by default.
runs_data_cleanup_include_args: false

# If you have a server with a high workload, it is recommended to use
# multiple server instances (horizontal scaling). If you do so, you also
# need to set up a RabbitMQ message service to ensure that the communication
# between the server and the nodes is handled properly. Then, fill out the
# RabbitMQ connection URI below to connect the server to it. Also, set the
# start_with_server flag to true to start RabbitMQ when you start the server.
rabbitmq:
  uri: amqp://myuser:mypassword@myhostname:5672/myvhost

# keycloak settings
keycloak:
  # whether users and nodes should be created in keycloak when the are created in the
  # server, and also deleted. Default is true.
  manage_users_and_nodes: true

# set up with which origins the server should allow CORS requests. The default
# is to allow all origins. If you want to restrict this, you can specify a list
# of origins here. Below are examples to allow requests from the Cotopaxi UI, and
# port 7600 on localhost. Usually, only the UI needs to access the server.
cors_allowed_origins:
  - https://portal.cotopaxi.vantage6.ai
  - http://localhost:7600

# development mode settings. Only use when running both the server and the algorithm
# store that it communicates with locally
dev:
  # Specify the URI to the host. This is used to generate the correct URIs to
  # communicate with the algorithm store. On Windows and Mac, you can use the special
  # hostname `host.docker.internal` to refer to the host machine. On Linux, you
  # should normally use http://172.17.0.1.
  host_uri: http://host.docker.internal

# Settings for enabling monitoring of vantage6 nodes resource usage (e.g. CPU, memory).
# This is done using Prometheus. There are two components to this:
# 1. The Prometheus exporter (running as part of the vantage6 server), which collects
#    the metrics from the nodes.
# 2. The Prometheus server (running as a separate Docker container), which scrapes the
#     metrics exposed by the Prometheus exporter and stores them.
# The exporter is started by default when the server starts (if prometheus is enabled).
# The Prometheus server can be started separately.
prometheus:
  # Set to true to enable Prometheus reporting. Default is false.
  enabled: false
  # Set to true to start the Prometheus server when starting the server
  start_with_server: false
  # The port on which the Prometheus exporter will be available. This is the port that the Prometheus server will scrape.
  # Note: The Prometheus server assumes the exporter is accessible via the Docker container's hostname.
  # Ensure that Prometheus is in the same Docker network as the vantage6 server to resolve the hostname.
  exporter_port: 7603

# algorithm stores to be coupled to the server on startup
algorithm_stores:
  - name: cotopaxi
    url: https://store.cotopaxi.vantage6.ai/api
  - name: local store
    url: http://localhost:7602/api

# Settings for the large result store. By default, the server uses a database to store all inputs and results.
# Adding this will set Vantage6 to use blob storage rather than the database for both inputs and results.
large_result_store:
  # Type of the large result store. Currently, only "azure" is supported.
  type: "azure"
  # The name of the Blob Storage container to use for storing large results.
  container_name: test-container

  # Use this block for connection string authentication:
  # -------------------------------------------------------
  # Connection string to the Storage account. Useful for testing purposes, such as connecting to Azurite.
  # The example connection string uses the default account name and key for Azurite.
  connection_string: "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://172.17.0.1:10000/devstoreaccount1;QueueEndpoint=http://172.17.0.1:10001/devstoreaccount1;"
  # -------------------------------------------------------

  # Or use this block for service principal authentication:
  # -------------------------------------------------------
  # Credentials for accessing the Blob Storage. If provided, these will be used instead of the connection string.
  # tenant_id, client_id, and client_secret are required for authentication.
  tenant_id: "your-tenant-id"
  client_id: "your-client-id"
  client_secret: "your-client-secret"
  # Name of the storage account.
  storage_account_name: "your-storage-account-name"
  # -------------------------------------------------------
